{"ast":null,"code":"import _asyncToGenerator from \"/Users/christianknoth/Thesis/Thesis-Project/Main-Project/Microfrontends/remote-pdp-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  getProduct(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            if (id) {\n              const params = new HttpParams().set('id', id);\n              const response = yield lastValueFrom(_this.http.get('localhost:8085/product', {\n                params: params\n              }));\n              console.log(\"resp\", response);\n              resolve(response);\n            }\n          } catch (error) {\n            reject(error);\n          }\n        });\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/christianknoth/Thesis/Thesis-Project/Main-Project/Microfrontends/remote-pdp-angular/src/app/services/product.service.ts"],"names":["HttpParams","lastValueFrom","i0","i1","ProductService","constructor","http","getProduct","id","Promise","resolve","reject","params","set","response","get","console","log","error","ɵfac","ProductService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACKC,EAAAA,UAAU,CAACC,EAAD,EAAK;AAAA;;AAAA;AACjB,aAAO,IAAIC,OAAJ;AAAA,qCAAY,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC1C,cAAI;AACA,gBAAIH,EAAJ,EAAQ;AACJ,oBAAMI,MAAM,GAAG,IAAIZ,UAAJ,GACVa,GADU,CACN,IADM,EACAL,EADA,CAAf;AAEA,oBAAMM,QAAQ,SAASb,aAAa,CAAC,KAAI,CAACK,IAAL,CAAUS,GAAV,CAAc,wBAAd,EAAwC;AAAEH,gBAAAA,MAAM,EAAEA;AAAV,eAAxC,CAAD,CAApC;AACAI,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,QAApB;AACAJ,cAAAA,OAAO,CAACI,QAAD,CAAP;AACH;AACJ,WARD,CASA,OAAOI,KAAP,EAAc;AACVP,YAAAA,MAAM,CAACO,KAAD,CAAN;AACH;AACJ,SAbM;;AAAA;AAAA;AAAA;AAAA,UAAP;AADiB;AAepB;;AAnBuB;;AAqB5Bd,cAAc,CAACe,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,cAAV,EAA0BF,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACAnB,cAAc,CAACoB,KAAf,GAAuB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,cAAT;AAAyBuB,EAAAA,OAAO,EAAEvB,cAAc,CAACe,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { HttpParams } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n    constructor(http) {\n        this.http = http;\n    }\n    async getProduct(id) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                if (id) {\n                    const params = new HttpParams()\n                        .set('id', id);\n                    const response = await lastValueFrom(this.http.get('localhost:8085/product', { params: params }));\n                    console.log(\"resp\", response);\n                    resolve(response);\n                }\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\nProductService.ɵfac = function ProductService_Factory(t) { return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient)); };\nProductService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductService, factory: ProductService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}